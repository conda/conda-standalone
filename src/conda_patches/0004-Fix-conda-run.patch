diff --git i/conda/__init__.py w/conda/__init__.py
index a9970a7a3..a4cf9f0ac 100644
--- i/conda/__init__.py
+++ w/conda/__init__.py
@@ -61,8 +61,11 @@ if os.getenv("CONDA_ROOT") is None:
     os.environ["CONDA_ROOT"] = sys.prefix
 
 #: The conda package directory.
-CONDA_PACKAGE_ROOT = abspath(dirname(__file__))
-#: The path within which to find the conda package.
+if getattr(sys, "_MEIPASS", None):
+    CONDA_PACKAGE_ROOT = os.path.join(sys.prefix, "conda")
+else:
+    CONDA_PACKAGE_ROOT = abspath(dirname(__file__))
+ #: The path within which to find the conda package.#: The path within which to find the conda package.
 #:
 #: If `conda` is statically installed this is the site-packages. If `conda` is an editable install
 #: or otherwise uninstalled this is the git repo.
diff --git i/conda/activate.py w/conda/activate.py
index f3b658470..c406eed9c 100644
--- i/conda/activate.py
+++ w/conda/activate.py
@@ -755,6 +755,8 @@ class _Activator(metaclass=abc.ABCMeta):
             return ""
 
     def _get_activate_scripts(self, prefix):
+        if prefix is None:
+            return ()
         _script_extension = self.script_extension
         se_len = -len(_script_extension)
         try:
@@ -769,6 +771,8 @@ class _Activator(metaclass=abc.ABCMeta):
         )
 
     def _get_deactivate_scripts(self, prefix):
+        if prefix is None:
+            return ()
         _script_extension = self.script_extension
         se_len = -len(_script_extension)
         try:
diff --git i/conda/base/context.py w/conda/base/context.py
index 34a5e6495..9ac146b2b 100644
--- i/conda/base/context.py
+++ w/conda/base/context.py
@@ -835,6 +835,8 @@ class Context(Configuration):
         addendum="Please use `conda.base.context.context.conda_exe_vars_dict` instead",
     )
     def conda_exe(self) -> PathType:
+        if getattr(sys, "_MEIPASS", None):
+            return sys.executable
         exe = "conda.exe" if on_win else "conda"
         return join(self.conda_prefix, BIN_DIRECTORY, exe)
 
@@ -870,9 +872,8 @@ class Context(Configuration):
                 "CONDA_PYTHON_EXE": sys.executable,
             }
         else:
-            exe = "conda.exe" if on_win else "conda"
             return {
-                "CONDA_EXE": os.path.join(sys.prefix, BIN_DIRECTORY, exe),
+                "CONDA_EXE": sys.executable,
                 "_CE_M": None,
                 "_CE_CONDA": None,
                 "CONDA_PYTHON_EXE": sys.executable,
diff --git i/conda/cli/main_run.py w/conda/cli/main_run.py
index dc7464662..767fed20d 100644
--- i/conda/cli/main_run.py
+++ w/conda/cli/main_run.py
@@ -88,11 +88,19 @@ def configure_parser(sub_parsers: _SubParsersAction, **kwargs) -> ArgumentParser
 def execute(args: Namespace, parser: ArgumentParser) -> int:
     from ..base.context import context
     from ..common.compat import encode_environment
+    from ..common.path import paths_equal
     from ..core.prefix_data import PrefixData
+    from ..exceptions import ArgumentError
     from ..gateways.disk.delete import rm_rf
     from ..gateways.subprocess import subprocess_call
     from ..utils import wrap_subprocess_call
 
+    if paths_equal(context.target_prefix, sys.prefix):
+        raise ArgumentError(
+            "Cannot use 'conda run' on conda-standalone's base environment; "
+            "choose a target environment with '-n' or '-p'."
+        )
+
     prefix_data = PrefixData.from_context()
     prefix_data.assert_environment()
     # create run script
diff --git i/conda/utils.py w/conda/utils.py
index b9a3cc5cc..515622286 100644
--- i/conda/utils.py
+++ w/conda/utils.py
@@ -13,7 +13,7 @@ from os.path import abspath, basename, dirname, isfile, join
 from pathlib import Path
 from shutil import which
 
-from . import CondaError
+from . import CONDA_PACKAGE_ROOT, CondaError
 from .auxlib.compat import Utf8NamedTemporaryFile, shlex_split_unicode
 from .common.compat import isiterable, on_win
 from .common.path import path_identity as _path_identity
@@ -401,14 +401,7 @@ def wrap_subprocess_call(
         multiline = True
     if on_win:
         comspec = get_comspec()  # fail early with KeyError if undefined
-        if dev_mode:
-            from . import CONDA_PACKAGE_ROOT
-
-            conda_bat = join(CONDA_PACKAGE_ROOT, "shell", "condabin", "conda.bat")
-        else:
-            conda_bat = environ.get(
-                "CONDA_BAT", abspath(join(root_prefix, "condabin", "conda.bat"))
-            )
+        conda_bat = join(CONDA_PACKAGE_ROOT, "shell", "condabin", "conda.bat")
         with Utf8NamedTemporaryFile(
             mode="w", prefix=tmp_prefix, suffix=".bat", delete=False
         ) as fh:
